// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: pb/proto/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_AddProduct_FullMethodName      = "/admin.AdminService/AddProduct"
	AdminService_UpdateProduct_FullMethodName   = "/admin.AdminService/UpdateProduct"
	AdminService_DeleteProduct_FullMethodName   = "/admin.AdminService/DeleteProduct"
	AdminService_ListAllProducts_FullMethodName = "/admin.AdminService/ListAllProducts"
	AdminService_GetProductById_FullMethodName  = "/admin.AdminService/GetProductById"
	AdminService_ListUsers_FullMethodName       = "/admin.AdminService/ListUsers"
	AdminService_DeleteUser_FullMethodName      = "/admin.AdminService/DeleteUser"
	AdminService_BlockUser_FullMethodName       = "/admin.AdminService/BlockUser"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AddProduct(ctx context.Context, in *AdminAddProductRequest, opts ...grpc.CallOption) (*AdminAddProductResponse, error)
	UpdateProduct(ctx context.Context, in *AdminUpdateProductRequest, opts ...grpc.CallOption) (*AdminUpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *AdminDeleteProductRequest, opts ...grpc.CallOption) (*AdminDeleteProductResponse, error)
	ListAllProducts(ctx context.Context, in *AdminListAllProductsRequest, opts ...grpc.CallOption) (*AdminListAllProductsResponse, error)
	GetProductById(ctx context.Context, in *AdminGetProductByIdRequest, opts ...grpc.CallOption) (*AdminGetProductByIdResponse, error)
	ListUsers(ctx context.Context, in *AdminListUsersRequest, opts ...grpc.CallOption) (*AdminListUsersResponse, error)
	DeleteUser(ctx context.Context, in *AdminDeleteUserRequest, opts ...grpc.CallOption) (*AdminDeleteUserResponse, error)
	BlockUser(ctx context.Context, in *AdminBlockUserRequest, opts ...grpc.CallOption) (*AdminBlockUserResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AddProduct(ctx context.Context, in *AdminAddProductRequest, opts ...grpc.CallOption) (*AdminAddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAddProductResponse)
	err := c.cc.Invoke(ctx, AdminService_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProduct(ctx context.Context, in *AdminUpdateProductRequest, opts ...grpc.CallOption) (*AdminUpdateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUpdateProductResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteProduct(ctx context.Context, in *AdminDeleteProductRequest, opts ...grpc.CallOption) (*AdminDeleteProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminDeleteProductResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListAllProducts(ctx context.Context, in *AdminListAllProductsRequest, opts ...grpc.CallOption) (*AdminListAllProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminListAllProductsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProductById(ctx context.Context, in *AdminGetProductByIdRequest, opts ...grpc.CallOption) (*AdminGetProductByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminGetProductByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_GetProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUsers(ctx context.Context, in *AdminListUsersRequest, opts ...grpc.CallOption) (*AdminListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminListUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUser(ctx context.Context, in *AdminDeleteUserRequest, opts ...grpc.CallOption) (*AdminDeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminDeleteUserResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BlockUser(ctx context.Context, in *AdminBlockUserRequest, opts ...grpc.CallOption) (*AdminBlockUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminBlockUserResponse)
	err := c.cc.Invoke(ctx, AdminService_BlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	AddProduct(context.Context, *AdminAddProductRequest) (*AdminAddProductResponse, error)
	UpdateProduct(context.Context, *AdminUpdateProductRequest) (*AdminUpdateProductResponse, error)
	DeleteProduct(context.Context, *AdminDeleteProductRequest) (*AdminDeleteProductResponse, error)
	ListAllProducts(context.Context, *AdminListAllProductsRequest) (*AdminListAllProductsResponse, error)
	GetProductById(context.Context, *AdminGetProductByIdRequest) (*AdminGetProductByIdResponse, error)
	ListUsers(context.Context, *AdminListUsersRequest) (*AdminListUsersResponse, error)
	DeleteUser(context.Context, *AdminDeleteUserRequest) (*AdminDeleteUserResponse, error)
	BlockUser(context.Context, *AdminBlockUserRequest) (*AdminBlockUserResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) AddProduct(context.Context, *AdminAddProductRequest) (*AdminAddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedAdminServiceServer) UpdateProduct(context.Context, *AdminUpdateProductRequest) (*AdminUpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedAdminServiceServer) DeleteProduct(context.Context, *AdminDeleteProductRequest) (*AdminDeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedAdminServiceServer) ListAllProducts(context.Context, *AdminListAllProductsRequest) (*AdminListAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProducts not implemented")
}
func (UnimplementedAdminServiceServer) GetProductById(context.Context, *AdminGetProductByIdRequest) (*AdminGetProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedAdminServiceServer) ListUsers(context.Context, *AdminListUsersRequest) (*AdminListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUser(context.Context, *AdminDeleteUserRequest) (*AdminDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServiceServer) BlockUser(context.Context, *AdminBlockUserRequest) (*AdminBlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddProduct(ctx, req.(*AdminAddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProduct(ctx, req.(*AdminUpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteProduct(ctx, req.(*AdminDeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListAllProducts(ctx, req.(*AdminListAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProductById(ctx, req.(*AdminGetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUsers(ctx, req.(*AdminListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUser(ctx, req.(*AdminDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BlockUser(ctx, req.(*AdminBlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _AdminService_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _AdminService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _AdminService_DeleteProduct_Handler,
		},
		{
			MethodName: "ListAllProducts",
			Handler:    _AdminService_ListAllProducts_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _AdminService_GetProductById_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AdminService_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminService_DeleteUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _AdminService_BlockUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/proto/admin.proto",
}
